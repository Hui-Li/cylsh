The code from this project was used for ["Sublinear Partition Estimation"](http://arxiv.org/abs/1508.01596), Pushpendre Rastogi, Benjamin Van Durme, arXiv:1508.01596 [stat.ML] (Preprint).

This project serves two purposes:
1. It provides bindings for the LSH cpp code that was released by
   Andoni in Python. Original code is at www.mit.edu/~andoni/LSH.
   (Note: Since they released their code in GPL, therefore this is also
   GPL)

2. Neyshabur et. al. (2014)[1] presented a clever modification to E2LSH
   to perform Maximum Inner Product Search. The code change was really
   small and it only needed like 10 lines of change to the following
   files to implement. So I added a flag to perform that as well.

   E2LSH-0.1/sources/Geometry.h
   E2LSH-0.1/sources/LocalitySensitiveHashing.h
   E2LSH-0.1/sources/LocalitySensitiveHashing.cpp
   E2LSH-0.1/sources/NearNeighbors.cpp
   Basically if you compile the module as "cython_binding_mips" then even though
   the API remains the same but the algorithm compiled would change
   and we would start doing MIPS based queries. Note that the parameter
   R would not map exactly to something meaningful.


Run the following in order to make the cython_bindings for the standard MIPS task and to test them.
make # This calls 'make cython_binding_mips' for doing MIPS
make test # This calls 'make test_mnist1k_cython_mips' and tests the MIPS code.
Read the Makefile for more.


All the code needed for creating cython bindings is in sources_py.
Read the original manual for understanding the c++ code.
Read the diffs "git diff --name-only 0a490a0d0 HEAD" for the c++ and
.h file to understand the changes done to implement Neyshabur
et. al.'s algorithm


[1] @article{neyshabur2014alsh,
Title = {{On Symmetric and Asymmetric LSHs for Inner Product Search}},
Author = {{Neyshabur}, B. and {Srebro}, N.},
Journal = {ArXiv e-prints},
Month = oct,
Primaryclass = {stat.ML},
Year = 2014}
